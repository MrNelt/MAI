>>>~/K$ PATH=./:$PATH  #  чтобы не писать при запуске ./ 
>>>~/K$  #  ------------ Программы генерации директорий с файлами
>>>~/K$ cat g1
# Make file $1 lenth $2 in directory P
if [ $# -ne 2 ]; then echo "Usage: g1 namefile lenth"; exit;fi
if test -d P; then rm -r P;fi 
mkdir P
c=$2
echo -n 2 > P/f
while [ $c -gt 0 ]
do 
cat P/f >> P/$1
c=$[ $c - 1 ]
done
ls -l P

>>>~/K$ g1 nnn 200
итого 8
-rw-rw-r-- 1 vktitov vktitov   1 мар  6 01:06 f
-rw-rw-r-- 1 vktitov vktitov 200 мар  6 01:06 nnn
>>>~/K$ 
>>>~/K$ cat g2
# Make files in directory P with names $1 $2 ...
if [ $# -eq 0 ]; then echo "Usage: g2 namefile1  [namefile2 ...]"; exit;fi
if test -d P; then rm -r P;fi 
mkdir P
echo 1 > P/ff
for f;do
cp P/ff P/$f
done
ls P  # for test
>>>~/K$ g2
Usage: g2 namefile1  [namefile2 ...]
>>>~/K$ g2 aaa1 aaa2 bbb1 bbb2 ccc
aaa1  aaa2  bbb1  bbb2	ccc  ff
>>>~/K$ 
>>>~/K$ cat g2a
# Make files in directory P with names $1 $2 ... (whithout delete P)
if [ $# -eq 0 ]; then echo "Usage: g2 namefile1  [namefile2 ...]"; exit;fi
if test ! -d P; then mkdir P;fi 
echo 1 > P/ff
for f;do
cp P/ff P/$f
done
ls P  # for test

>>>~/K$ g2a xxx1 xxx2 yyy
aaa1  aaa2  bbb1  bbb2	ccc  ff  xxx1  xxx2  yyy
>>>~/K$ 
>>>~/K$ cat g3
# Make files in directory P with prefix $1 and names $2 $3 ...
if [ $# -lt 2 ]; then echo "Usage: g3 prefix namefile1  [namefile2 ...]"
exit;fi
if test -d P; then rm -r P;fi 
mkdir P
echo 1 > P/g
p=$1;shift
for f;do
cp P/g P/$p$f
done
ls P  # for test

>>>~/K$ g3 aaa 1 2 3 4 5 6
aaa1  aaa2  aaa3  aaa4	aaa5  aaa6  g
>>>~/K$ cat g3a
# Make files in directory P with prefix $1 and names $2 $3 ...
if [ $# -lt 2 ]; then echo "Usage: g3 prefix namefile1  [namefile2 ...]"
exit;fi
if test ! -d P; then mkdir P;fi 
echo 1 > P/g
p=$1;shift
for f;do
cp P/g P/$p$f
done
ls P  # for test

>>>~/K$ g3a bbb  1 2 3 4 5 6 7
aaa1  aaa3  aaa5  bbb1	bbb3  bbb5  bbb7
aaa2  aaa4  aaa6  bbb2	bbb4  bbb6  g
>>>~/K$ g3a xxx  1 2 3 4 5
aaa1  aaa3  aaa5  bbb1	bbb3  bbb5  bbb7  xxx1	xxx3  xxx5
aaa2  aaa4  aaa6  bbb2	bbb4  bbb6  g	  xxx2	xxx4
>>>~/K$ 
>>>~/K$ cat delwithprefix    # демонстрация скрипта delwithprefix 
if [ $# = 0 ]
then echo "I'v done nothing"; exit;fi
if [[ $1 == ? ]]
then echo "Use: delwithprefix [-i] [prefix]";exit;fi
if [[ $1 == '-i' ]]
then i=1; shift
else i=0
fi
echo "i=$i \$1=$1 \$#=$# \$@=$@"
if [ $# = 0 ];then
for file in P/*
do
echo "do delete file $file ? (y,n)"
read a 
if [[ $a == 'y' ]]
then rm $file;fi
done
else
for file in P/$1*;do
if [ $i = 1 ]
then
echo "do delete file $file ? (y,n)"
read a 
if [[ $a == 'y' ]]
then rm $file;fi
else
rm $file;echo $file deleted
fi
done
fi

>>>~/K$ 
>>>~/K$ delwithprefix 
I'v done nothing
>>>~/K$ delwithprefix ?
Use: delwithprefix [-i] [prefix]
>>>~/K$ delwithprefix -i
i=1 $1= $#=0 $@=
do delete file P/aaa1 ? (y,n)
y
do delete file P/aaa2 ? (y,n)

do delete file P/aaa3 ? (y,n)
y
do delete file P/aaa4 ? (y,n)

do delete file P/aaa5 ? (y,n)
y
do delete file P/aaa6 ? (y,n)

do delete file P/bbb1 ? (y,n)
y
do delete file P/bbb2 ? (y,n)

do delete file P/bbb3 ? (y,n)
y
do delete file P/bbb4 ? (y,n)

do delete file P/bbb5 ? (y,n)
y
do delete file P/bbb6 ? (y,n)

do delete file P/bbb7 ? (y,n)
y
do delete file P/g ? (y,n)
y
do delete file P/xxx1 ? (y,n)
y
do delete file P/xxx2 ? (y,n)
 
do delete file P/xxx3 ? (y,n)
y
do delete file P/xxx4 ? (y,n)

do delete file P/xxx5 ? (y,n)
y
>>>~/K$ ls P
aaa2  aaa4  aaa6  bbb2  bbb4  bbb6  xxx2  xxx4
>>>~/K$ delwithprefix -i bbb
i=1 $1=bbb $#=1 $@=bbb
do delete file P/bbb2 ? (y,n)
y
do delete file P/bbb4 ? (y,n)

do delete file P/bbb6 ? (y,n)
y
>>>~/K$ ls P
aaa2  aaa4  aaa6  bbb4  xxx2  xxx4
>>>~/K$ delwithprefix aaa
i=0 $1=aaa $#=1 $@=aaa
P/aaa2 deleted
P/aaa4 deleted
P/aaa6 deleted
>>>~/K$ ls P
bbb4  xxx2  xxx4
>>>~/K$ delwithprefix -i xx
i=1 $1=xx $#=1 $@=xx
do delete file P/xxx2 ? (y,n)
y
do delete file P/xxx4 ? (y,n)

>>>~/K$ ls P
bbb4  xxx4
>>>~/K$ 
>>>~/K$ cat revers5
count=$#
cmd=echo
while true; do
cmd="$cmd \$$count"
count=$[ $count - 1 ]
if [ $count = 0 ]
then break
fi; done
eval $cmd

>>>~/K$ revers5 a b c d e f h
h f e d c b a
>>>~/K$ cat revers6
count=$#
cmd=echo
while true; do
cmd="$cmd \${$count}"
count=$[ $count - 1 ]
if [[ $count > 0 ]]
then
continue
else break
fi; done
eval $cmd

>>>~/K$ revers6 1 2 3 4 5 6 7 8 9
9 8 7 6 5 4 3 2 1
>>>~/K$   # ------------ демонстрация  использования функций
>>>~/K$ cat sum2
function sum2 {
echo $(( $1 + $2 ))
}

if [ $# -eq 2 ]
then value=$( sum2 $1 $2 )
echo "result=$value"
else
echo 'Usage: sum2 a b'
fi
>>>~/K$ sum2 15 17
result=32
>>>~/K$ cat sum2a
sum2 () {
echo $(( $1 + $2 ))
}
if [ $# -eq 2 ]
then echo "result=$( sum2 $1 $2 )"
else
echo 'Usage: sum2 a b'
fi
>>>~/K$ sum2a 16 19
result=35
>>>~/K$ 
>>>~/K$ cat func
function s { 
a=$1;let a+=$a+${#a};echo $a 
} 

s 200

>>>~/K$ func
403
>>>~/K$ func 100
403
>>>~/K$ 
>>>~/K$ cat testlen1 
testlen1 () { for p;do echo lenth of $p = ${#p}; done }

testlen1 1 abcd 'abc def'
>>>~/K$ testlen1 
lenth of 1 = 1
lenth of abcd = 4
lenth of abc def = 7
>>>~/K$
>>>~/K$ cat lenth 
# lenth of $1 x2
len () {
b=$1
echo ${#b}
}
a=$1
echo lenth \$1 x2 = $(len $a$a)

>>>~/K$ lenth aaaaa 
lenth $1 x2 = 10
>>>~/K$ lenth 123456789
lenth $1 x2 = 18
>>>~/K$ 
>>>~/K$   # ------- демонстрация рекурсии на примере вычисления факториала числа
>>>~/K$ cat fact
fact () 
{ if [ $1 = 0 ];then echo 1
else echo $(($1*$(fact $(($1-1)) ) ))
fi
}
echo fact $1 = $(fact $1)

>>>~/K$ fact 5
fact 5 = 120
>>>~/K$ fact 6
fact 6 = 720
>>>~/K$ fact 1
fact 1 = 1
>>>~/K$ fact 0
fact 0 = 1
>>>~/K$ fact 20
fact 20 = 2432902008176640000
>>>~/K$ fact 21  #   вычисляет неверно (переполнение)
fact 21 = -4249290049419214848
>>>~/K$ 
>>>~/K$  #  ---------------------- Строки
>>>~/K$ str=`ls`  #  строка из имён файлов директории К
>>>~/K$ echo $str
array array1 delwithprefix fact func g1 g2 g2a g3 g3a ht ht1 inf lenth lesson2 Lesson2.03.txt P revers5 revers6 sum2 sum2a testlen1
>>>~/K$ str=$(ls)  #  то же самое
>>>~/K$ echo $str
array array1 delwithprefix fact func g1 g2 g2a g3 g3a ht ht1 inf lenth lesson2 Lesson2.03.txt P revers5 revers6 sum2 sum2a testlen1
>>>~/K$ echo ${#str}  #  длина строки
131
>>>~/K$ echo ${str:4:11}  # интервал строки с 5-го символа
y array1 de
>>>~/K$ echo ${str:0:11}   # интервал строки отначала
array array
>>>~/K$ echo ${str::11}   # то же самое
array array
>>>~/K$ echo ${str:120}  # конец строки с 121-го символа
2a testlen1
>>>~/K$ echo ${str:120:8}
2a testl
>>>~/K$ echo ${str:$[${#str}-10]}   # последние 10 символов строки 
a testlen1
>>>~/K$ echo ${str:$[${#str}-10]:8}
a testle
>>>~/K$ 

>>>~/K$  #  ---------------------- Параметры
>>>~/K$ set a b c d e f
>>>~/K$ echo $#   # Число параметров
6
>>>~/K$ echo $@
a b c d e f
>>>~/K$ echo ${@:2:3}
b c d
>>>~/K$ echo ${@:2}
b c d e f
>>>~/K$ echo ${@:$[ $# - 4 ]}
b c d e f
>>>~/K$ echo ${@:$[ $# - 3 ]}
c d e f
>>>~/K$ echo ${@:$[ $# - 3 ]:3}
c d e
>>>~/K$  #  ---------------------- Массивы
>>>~/K$ arr=(aaaa bbb ccc dd e)
>>>~/K$ echo ${arr}  # Содержимое 1-го элемента массива
aaaa
>>>~/K$ echo ${arr[@]}  # Содержимое всего массива
aaaa bbb ccc dd e
>>>~/K$ echo ${arr[2]}  # Содержимое 3-го элемента массива
ccc
>>>~/K$ echo ${#arr}  # Длина 1-го элемента массива
4
>>>~/K$ echo ${#arr[@]}  # Число элементов массива
5
>>>~/K$ for((i=0;i<${#arr[@]};i++));do echo ${arr[i]}; done   #   Выполнение целой программы в командной строке
aaaa
bbb
ccc
dd
e
>>>~/K$ for((i=0;i<${#arr[@]};i++));do echo -n ${arr[i]} ' '; done ;echo   #   Выполнение целой программы в командной строке (другой вариант)
aaaa  bbb  ccc  dd  e  

>>>~/K$ cat array   # демонстрация скрипта array
# output array
a=( a b c 'a b c' $1)
for (( i=0;i<${#a[@]};i++ ));do echo -n ${a[i]} ' ';done
echo lenth of array = ${#a[@]}
>>>~/K$ array
a  b  c  a b c  lenth of array = 4
>>>~/K$ array xxx
a  b  c  a b c  xxx  lenth of array = 5
>>>~/K$ array 'xxx y zz 1 2 3 4 5 6 7 8 9'
a  b  c  a b c  xxx  y  zz  1  2  3  4  5  6  7  8  9  lenth of array = 16
>>>~/K$ 
>>>~/K$ x=1234567890987654321
>>>~/K$ arg(){ cmd=$1;cmd="echo \$$cmd"; echo $(eval $cmd); }     # Функцию можно определить в командной строке (вне скрипта)
>>>~/K$ arg x   #  Вызов заданной функции 
1234567890987654321
>>>~/K$ cat ht  # демонстрация скрипта ht (head, tail)  
# head of $1 (lenth $2) and tail of $1 (lenth $3)

len () {
b=$1
echo ${#b}
}

head () {
b=$1
echo ${b::$2}
}

tail () {
b=$1
echo ${b:$[$(len $b)-$2]}
}

 echo head of \$1 = $(head $1 $2)
 echo tail of \$1 = $(tail $1 $3)
>>>~/K$ ht $x 7 9
head of $1 = 1234567
tail of $1 = 987654321
>>>~/K$ 


